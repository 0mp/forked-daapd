{"name":"forked-daapd","tagline":"This is a much updated version of the original forked-daapd 0.19, a Linux/FreeBSD DAAP (iTunes) media server with support for AirPlay devices, Apple Remote (and compatibles), MPD, Spotify, mp3 streaming and internet radio.","body":"# forked-daapd\r\n\r\nforked-daapd is a Linux/FreeBSD DAAP (iTunes), MPD (Music Player Daemon) and\r\nRSP (Roku) media server.\r\n\r\nIt has support for AirPlay devices/speakers, Apple Remote (and compatibles),\r\nMPD clients, network streaming, internet radio, Spotify and LastFM. It does not\r\nsupport AirPlay video.\r\n\r\nDAAP stands for Digital Audio Access Protocol, and is the protocol used\r\nby iTunes and friends to share/stream media libraries over the network.\r\n\r\nRSP is Roku's own media sharing protocol. Roku are the makers of the\r\nSoundBridge devices. See http://www.roku.com.\r\n\r\nThe source for this version of forked-daapd can be found here:\r\n\r\n  https://github.com/ejurgensen/forked-daapd.git\r\n\r\nThe original (now unmaintained) source can be found here:\r\n\r\n  http://git.debian.org/?p=users/jblache/forked-daapd.git\r\n\r\nforked-daapd is a complete rewrite of mt-daapd (Firefly Media Server).\r\n\r\n\r\n## Contents of this README\r\n\r\n- [Getting started](#getting-started)\r\n- [Supported clients](#supported-clients)\r\n- [Using Remote](#using-remote)\r\n- [AirPlay devices/speakers](#airplay-devicesspeakers)\r\n- [Local audio output](#local-audio-output)\r\n- [MP3 network streaming (streaming to iOS)](#MP3-network-streaming-(streaming-to-iOS))\r\n- [Supported formats](#supported-formats)\r\n- [Streaming MPEG4](#streaming-mpeg4)\r\n- [Playlists and internet radio](#playlists-and-internet-radio)\r\n- [Artwork](#artwork)\r\n- [Library](#library)\r\n- [Command line and web interface](#command-line-and-web-interface)\r\n- [Spotify](#spotify)\r\n- [LastFM](#lastfm)\r\n- [MPD clients](#mpd-clients)\r\n\r\n\r\n## Getting started\r\n\r\nAfter installation (see [INSTALL](INSTALL)) do the following:\r\n\r\n 1. Edit the configuration file (usually `/etc/forked-daapd.conf`) to suit your\r\n    needs\r\n 2. Start or restart the server (usually `/etc/init.d/forked-daapd restart`)\r\n 3. Wait for the library scan to complete. You can follow the progress with\r\n    `tail -f /var/log/forked-daapd.log`\r\n 4. If you are going to use a remote app, pair it following the procedure\r\n    described below\r\n\r\n\r\n## Supported clients\r\n\r\nforked-daapd supports these kinds of clients:\r\n\r\n- DAAP clients, like iTunes or Rhythmbox\r\n- Remote clients, like Apple Remote or compatibles for Android/Windows Phone\r\n- AirPlay devices, like AirPort Express, Shairport and various AirPlay speakers\r\n- MPD clients, like mpc (see [mpd-clients](#mpd-clients))\r\n- MP3 network stream clients, like VLC and almost any other music player\r\n- RSP clients, like Roku Soundbridge\r\n\r\nLike iTunes, you can control forked-daapd with Remote and stream your music\r\nto AirPlay devices.\r\n\r\nA single forked-daapd instance can handle several clients concurrently,\r\nregardless of the protocol.\r\n\r\nHere is a list of working and non-working DAAP and Remote clients. The list is\r\nprobably obsolete when you read it :-)\r\n\r\n|          Client          | Developer  |  Type  |   Platform    | Working (vers.) |\r\n| ------------------------ | ---------- | ------ | ------------- | --------------- |\r\n| iTunes                   | Apple      | DAAP   | Win, OSX      | Yes (12.3)      |\r\n| Rhythmbox                | Gnome      | DAAP   | Linux         | Yes             |\r\n| WinAmp DAAPClient        | WardFamily | DAAP   | WinAmp        | Yes             |\r\n| Amarok w/DAAP plugin     | KDE        | DAAP   | Linux/Win     | Yes (2.8.0)     |\r\n| Banshee                  |            | DAAP   | Linux/Win/OSX | No (2.6.2)      |\r\n| jtunes4                  |            | DAAP   | Java          | No              |\r\n| Firefly Client           |            | (DAAP) | Java          | No              |\r\n| Remote                   | Apple      | Remote | iOS           | Yes (4.2.2)     |\r\n| Retune                   | SquallyDoc | Remote | Android       | Yes (3.5.23)    |\r\n| TunesRemote+             | Melloware  | Remote | Android       | Yes (2.5.3)     |\r\n| Remote for iTunes        | Hyperfine  | Remote | Android       | Yes             |\r\n| Remote for Windows Phone | Komodex    | Remote | Windows Phone | Yes (2.2.1.0)   |\r\n| TunesRemote SE           |            | Remote | Java          | Yes (r108)      |\r\n\r\n\r\n\r\n## Using Remote\r\n\r\nIf you plan to use Remote with forked-daapd, read the following sections\r\ncarefully. The pairing process described is similar for other controllers, but\r\nsome do not require pairing.\r\n\r\n### Pairing with Remote on iPod/iPhone\r\n\r\nforked-daapd can be paired with Apple's Remote application for iPod/iPhone/iPad;\r\nthis is how the pairing process works:\r\n\r\n 1. Start forked-daapd\r\n 2. Start Remote, go to Settings, Add Library\r\n 3. Look in the log file for a message saying:\r\n    \r\n    ```\r\n    \"Discovered remote 'Foobar' (id 71624...\"\r\n    ```\r\n   \r\n    This tells you the name of your device (Foobar in this example).\r\n    \r\n    If you cannot find this message, it means that forked-daapd did not receive\r\n    a mDNS announcement from your Remote. You have a network issue and mDNS\r\n    doesn't work properly on your network.\r\n    \r\n 4. Prepare a text file with a filename ending with .remote; the filename\r\n    doesn't matter, only the .remote ending does. This file must contain\r\n    two lines: the first line is the name of your iPod/iPhone/iPad, the second\r\n    is the 4-digit pairing code displayed by Remote.\r\n    \r\n    If your iPod/iPhone/iPad is named \"Foobar\" and Remote gives you the pairing\r\n    code 5387, the file content must be:\r\n    ```\r\n    Foobar\r\n    5387 \r\n    ```\r\n    \r\n 5. Move this file somewhere in your library\r\n\r\nAt this point, you should be done with the pairing process and Remote should\r\ndisplay the name of your forked-daapd library. You should delete the .remote\r\nfile once the pairing process is done.\r\n\r\nIf Remote doesn't display the name of your forked-daapd library at this point,\r\nthe pairing process failed. Here are some common reasons:\r\n\r\n#### Your library is a network mount\r\nforked-daapd does not get notified about new files on network mounts, so the\r\n.remote file was not detected. You will see no log file messages about the file.\r\nSolution: Set two library paths in the config, and add the .remote file to the\r\nlocal path. See [Libraries on network mounts](#libraries-on-network-mounts).\r\n\r\n#### You did not enter the correct name or pairing code\r\nYou will see an error in the log about pairing failure with a HTTP response code\r\nthat is *not* 0.\r\nSolution: Copy-paste the name to be sure to get specials characters right. You\r\ncan also try the pairinghelper script located in the scripts-folder of the\r\nsource.\r\n\r\n#### No response from Remote, possibly a network issue\r\nIf you see an error in the log with either:\r\n - a HTTP response code that is 0\r\n - \"Empty pairing request callback\"\r\nit means that forked-daapd could not establish a connection to Remote. This \r\nmight be a network issue.\r\nSolution: Sometimes it resolves the issue if you force Remote to quit, restart\r\nit and do the pairing proces again. Another trick is to establish some other\r\nconnection (eg SSH) from the iPod/iPhone/iPad to the host.\r\n\r\nOtherwise try using avahi-browse for troubleshooting:\r\n - in a terminal, run `avahi-browse -r -k _touch-remote._tcp`\r\n - start Remote, goto Settings, Add Library\r\n - after a couple seconds at most, you should get something similar to this:\r\n\r\n```\r\n+ ath0 IPv4 59eff13ea2f98dbbef6c162f9df71b784a3ef9a3      _touch-remote._tcp   local\r\n= ath0 IPv4 59eff13ea2f98dbbef6c162f9df71b784a3ef9a3      _touch-remote._tcp   local\r\n   hostname = [Foobar.local]\r\n   address = [192.168.1.1]\r\n   port = [49160]\r\n   txt = [\"DvTy=iPod touch\" \"RemN=Remote\" \"txtvers=1\" \"RemV=10000\" \"Pair=FAEA410630AEC05E\" \"DvNm=Foobar\"]\r\n```\r\n\r\nHit Ctrl-C to terminate avahi-browse.\r\n\r\nThe name of your iPod/iPhone/iPad is the value of the DvNm field above. In this\r\nexample, the correct value is Foobar. To check for network issues you can try to\r\nconnect to address and port with telnet.\r\n\r\n### Selecting output devices\r\n\r\nRemote gets a list of output devices from the server; this list includes any\r\nand all devices on the network we know of that advertise AirPlay: AirPort\r\nExpress, Apple TV, ... It also includes the local audio output, that is, the\r\nsound card on the server (even if there is no soundcard).\r\n\r\nBy default, if no output is selected when playback starts, the local output\r\ndevice will be used. If that fails it will try to stream to any available\r\nAirPlay speaker.\r\n\r\nforked-daapd remembers your selection and the individual volume for each\r\noutput device; selected devices will be automatically re-selected at the next\r\nserver startup, provided they appear in the 5 minutes following the startup\r\nand no playback has occured yet.\r\n\r\n\r\n## AirPlay devices/speakers\r\n\r\nforked-daapd will discover the AirPlay devices available on your network. For\r\ndevices that are password-protected, the device's AirPlay name and password\r\nmust be given in the configuration file. See the sample configuration file\r\nfor the syntax.\r\n\r\n\r\n## Local audio output\r\n\r\nThe audio section of the configuration file supports 2 parameters for the local\r\naudio device:\r\n - nickname: this is the name that will be used in the speakers list in Remote\r\n - card: this is the name/device string (ALSA) or device node (OSS4) to be used\r\n   as the local audio device. Defaults to \"default\" for ALSA and \"/dev/dsp\" for\r\n   OSS4.\r\n\r\n\r\n## MP3 network streaming (streaming to iOS)\r\n\r\nYou can listen to audio being played by forked-daapd by opening this network\r\nstream address in pretty much any music player:\r\n\r\n http://[your hostname/ip address]:3689/stream.mp3\r\n\r\nThis is currently the only way of listening to your audio on iOS devices, since\r\nApple does not allow AirPlay receiver apps, and because Apple Home Sharing\r\ncannot be supported by forked-daapd. So what you can do instead is install a\r\nmusic player app like VLC, connect to the stream and control playback with\r\nRemote. You can also use MPoD in \"On the go\"-mode, where control and playback is\r\nintegrated in one app (see (#mpd-clients)).\r\n\r\nNote that MP3 encoding must be supported by ffmpeg/libav for this to work. If\r\nit is not available you will see a message in the log file. In Debian/Ubuntu you\r\nget MP3 encoding support by installing the package \"libavcodec-extra\".\r\n\r\n\r\n## Supported formats\r\n\r\nforked-daapd should support pretty much all media formats. It relies on libav\r\n(or ffmpeg) to extract metadata and decode the files on the fly when the client\r\ndoesn't support the format.\r\n\r\nFormats are attributed a code, so any new format will need to be explicitely\r\nadded. Currently supported:\r\n - MPEG4: mp4a, mp4v\r\n - AAC: alac\r\n - MP3 (and friends): mpeg\r\n - FLAC: flac\r\n - OGG VORBIS: ogg\r\n - Musepack: mpc\r\n - WMA: wma (WMA Pro), wmal (WMA Lossless), wmav (WMA video)\r\n - AIFF: aif\r\n - WAV: wav\r\n\r\n\r\n## Streaming MPEG4\r\n\r\nDepending on the client application, you may need to optimize your MPEG4 files\r\nfor streaming. Stream-optimized MPEG4 files have their metadata at the beginning\r\nof the file, whereas non-optimized files have them at the end.\r\n\r\nNot all clients need this; if you're having trouble playing your MPEG4 files,\r\nthis is the most probable cause. iTunes, in particular, doesn't handle files\r\nthat aren't optimized, though FrontRow does.\r\n\r\nFiles produced by iTunes are always optimized by default. Files produced by\r\nFAAC and a lot of other encoders are not, though some encoders have an option\r\nfor that.\r\n\r\nThe mp4creator tool from the mpeg4ip suite can be used to optimize MPEG4 files,\r\nwith the -optimize option:\r\n```\r\n  $ mp4creator -optimize foo.m4a\r\n```\r\n\r\nDon't forget to make a backup copy of your file, just in case.\r\n\r\nNote that not all tag/metadata editors know about stream optimization and will\r\nhappily write the metadata back at the end of the file after you've modified\r\nthem. Watch out for that.\r\n\r\n\r\n## Playlists and internet radio\r\n\r\nforked-daapd supports M3U and PLS playlists. Just drop your playlist somewhere\r\nin your library with an .m3u or .pls extension and it will pick it up.\r\n\r\nIf the playlist contains an http URL it will be added as an internet radio\r\nstation, and the URL will be probed for Shoutcast (ICY) metadata. If the radio\r\nstation provides artwork, forked-daapd will download it during playback and send\r\nit to any remotes or AirPlay devices requesting it.\r\n\r\nInstead of downloading M3U's from your radio stations, you can also make an\r\nempty M3U file and in it insert links to the M3U's of your radio stations.\r\n\r\nSupport for iTunes Music Library XML format is available as a compile-time\r\noption. By default, metadata from our parsers is preferred over what's in\r\nthe iTunes DB; use itunes_overrides = true if you prefer iTunes' metadata.\r\n\r\nforked-daapd has support for smart playlists. How to create a smart playlist is\r\ndocumented in [README_SMARTPL.md](README_SMARTPL.md).\r\n\r\n\r\n## Artwork\r\n\r\nforked-daapd has support for artwork.\r\n\r\nEmbedded artwork is only supported if your version of forked-daapd was built\r\nwith libav 9+ or ffmpeg 0.11+.\r\n\r\nYour artwork must be in PNG or JPEG format, dimensions do not matter;\r\nforked-daapd scales down (never up) the artwork on-the-fly to match the\r\nconstraints given by the client. Note, however, that the bigger the picture,\r\nthe more time and resources it takes to perform the scaling operation.\r\n\r\nThe naming convention for album and artist artwork (group artwork) is as \r\nfollows:\r\n - if a file {artwork,cover,Folder}.{png,jpg} is found in one of the directories\r\n   containing files that are part of the group, it is used as the artwork. The\r\n   first file found is used, ordering is not guaranteed;\r\n - failing that, if [directory name].{png,jpg} is found in one of the\r\n   directories containing files that are part of the group, it is used as the\r\n   artwork. The first file found is used, ordering is not guaranteed;\r\n - failing that, individual files are examined and the first file found \r\n   with an embedded artwork is used. Here again, ordering is not guaranteed.\r\n\r\nArtwork for individual songs is not supported, artwork for individual songs is \r\nfound by resolving to the group artwork.\r\n\r\n{artwork,cover,Folder} are the default, you can add other base names in the\r\nconfiguration file.\r\n\r\nYou can use symlinks for the artwork files; the artwork is not scanned/indexed.\r\n\r\nforked-daapd caches artwork in a separate cache file. The default path is \r\n`/var/cache/forked-daapd/cache.db` and can be configured in the configuration \r\nfile. The cache.db file can be deleted without losing the library and pairing \r\ninformations.\r\n\r\n## Library\r\n\r\nThe library is scanned in bulk mode at startup, but the server will be available\r\neven while this scan is in progress. You can follow the progress of the scan in\r\nthe log file.\r\n\r\nOf course, if files have gone missing while the server was not running a request\r\nfor these files will produce an error until the scan has completed and the file\r\nis no longer offered. Similarly, new files added while the server was not\r\nrunning won't be offered until they've been scanned.\r\n\r\nChanges to the library are reflected in real time after the initial scan. The\r\ndirectories are monitored for changes and rescanned on the fly. Note that if you\r\nhave your library on a network mount then real time updating may not work. Read\r\nbelow about what to do in that case.\r\n\r\nIf you change any of the directory settings in the library section of the\r\nconfiguration file a rescan is required before the new setting will take effect.\r\nCurrently, this will not be done automatically, so you need to trigger the\r\nrescan as described below.\r\n\r\n\r\n### Symlinks and pipes\r\n\r\nSymlinks are supported and dereferenced. This does interact in tricky ways\r\nwith the above monitoring and rescanning, so you've been warned. Changes to\r\nsymlinks themselves won't be taken into account, or not the way you'd expect.\r\n\r\nIf you use symlinks, do not move around the target of the symlink. Avoid\r\nlinking files, as files themselves aren't monitored for changes individually,\r\nso changes won't be noticed unless the file happens to be in a directory that\r\nis monitored.\r\n\r\nBottom line: symlinks are for directories only.\r\n\r\nPipes made with mkfifo are also supported. This feature can be useful if you\r\nhave a program that can stream PCM16 audio to a pipe. Forked-daapd can then\r\nforward the audio to one or more AirPlay speakers.\r\n\r\nPipes have no metadata, so they will be added with \"Unknown artist\" and \"Unknown\r\nalbum\". The name of the pipe will be used as the track title.\r\n\r\n\r\n### Libraries on network mounts\r\n\r\nMost network filesharing protocols do not offer notifications when the library\r\nis changed. So that means forked-daapd cannot update its database in real time.\r\nInstead you can schedule a cron job to update the database.\r\n\r\nThe first step in doing this is to add two entries to the 'directories'\r\nconfiguration item in forked-daapd.conf:\r\n\r\n```\r\n  directories = { \"/some/local/dir\", \"/your/network/mount/library\" }\r\n```\r\n\r\nNow you can make a cron job that runs this command:\r\n\r\n```\r\n  touch /some/local/dir/trigger.init-rescan\r\n```\r\n\r\nWhen forked-daapd detects a file with filename ending .init-rescan it will\r\nperform a bulk scan similar to the startup scan.\r\n\r\n\r\n### Troubleshooting library issues\r\n\r\nIf you place a file with the filename ending .full-rescan in your library,\r\nyou can trigger a full rescan of your library. This will clear all music and\r\nplaylists from forked-daapd's database and initiate a fresh bulk scan. Pairing\r\nand speaker information will be kept. Only use this for troubleshooting, it is\r\nnot necessary during normal operation.\r\n\r\n\r\n\r\n## Command line and web interface\r\n\r\nforked-daapd is meant to be used with the clients mentioned above, so it does\r\nnot have a command line interface nor does it have a web interface. You can,\r\nhowever, to some extent control forked-daapd with [MPD clients](#mpd-clients) or \r\nfrom the command line by issuing DAAP/DACP commands with a program like curl.\r\nHere is an example of how to do that.\r\n\r\nSay you have a playlist with a radio station, and you want to make a script that\r\nstarts playback of that station:\r\n\r\n1. Run 'sqlite3 [your forked-daapd db]'. Use 'select id,title from files' to get\r\n   the id of the radio station, and use 'select id,title from playlists' to get\r\n   the id of the playlist.\r\n2. Convert the two ids to hex.\r\n3. Put the following lines in the script with the relevant ids inserted (also\r\n   observe that you must use a session-id < 100, and that you must login and\r\n   logout):\r\n\r\n```\r\ncurl \"http://localhost:3689/login?pairing-guid=0x1&request-session-id=50\"\r\ncurl \"http://localhost:3689/ctrl-int/1/playspec?database-spec='dmap.persistentid:0x1'&container-spec='dmap.persistentid:0x[PLAYLIST-ID]'&container-item-spec='dmap.containeritemid:0x[FILE ID]'&session-id=50\"\r\ncurl \"http://localhost:3689/logout?session-id=50\"\r\n```\r\n\r\n\r\n\r\n## Spotify\r\n\r\nforked-daapd has *some* support for Spotify. It must be compiled with the\r\n`--enable-spotify option` (see [INSTALL](INSTALL)). You must have also have\r\nlibspotify installed, otherwise the Spotify integration will not be available.\r\nYou can get libspotify here:\r\n\r\n  - Original (binary) tar.gz, see https://developer.spotify.com\r\n  - Debian package (libspotify-dev), see https://apt.mopidy.com\r\n  \r\nYou must also have a Spotify premium account. If you normally log into Spotify\r\nwith your Facebook account you must first go to Spotify's web site where you can\r\nget the Spotify username and password that matches your account. With\r\nforked-daapd you cannot login into Spotify with your Facebook username/password.\r\n\r\nThe procedure for logging in to Spotify is very much like the Remote pairing\r\nprocedure. You must prepare a file, which should have the ending \".spotify\".\r\nThe file must have two lines: The first is your Spotify user name, and the\r\nsecond is your password. Move the file to your forked-daapd library.\r\nForked-daapd will then log in and add all the music in your Spotify playlists\r\nto its database.\r\n\r\nSpotify will automatically notify forked-daapd about playlist updates, so you\r\nshould not need to restart forked-daapd to syncronize with Spotify.\r\n\r\nFor safety you should delete the \".spotify\" file after first login. Forked-daapd\r\nwill not store your password, but will still be able to log you in automatically\r\nafterwards, because libspotify saves a login token. You can configure the\r\nlocation of your Spotify user data in the configuration file.\r\n\r\nLimitations: You will only be able to play tracks from your Spotify playlists,\r\nso you can't search and listen to music from the rest of the Spotify catalogue.\r\nYou will not be able to do any playlist management through forked-daapd - use\r\na Spotify client for that. You also can only listen to your music by letting\r\nforked-daapd do the playback - so that means you can't stream from forked-daapd\r\nto iTunes.\r\n\r\n\r\n## LastFM\r\n\r\nIf forked-daapd was built with LastFM scrobbling enabled (see the [INSTALL](INSTALL) file)\r\nyou can have it scrobble the music you listen to. To set up scrobbling you must\r\ncreate a text file with the file name ending \".lastfm\". The file must have two\r\nlines: The first is your LastFM user name, and the second is your password. Move\r\nthe file to your forked-daapd library. Forked-daapd will then log in and get a\r\npermanent session key.\r\n\r\nYou should delete the .lastfm file immediately after completing the first login.\r\nFor safety, forked-daapd will not store your LastFM username/password, only the\r\nsession key. The session key does not expire.\r\n\r\nTo stop scrobbling from forked-daapd, add an empty \".lastfm\" file to your\r\nlibrary.\r\n\r\n## MPD clients\r\nIf forked-daapd was build with support for the [Music Player Deamon](http://musicpd.org/) \r\nprotocol (see the [INSTALL](INSTALL) file) you can - to some extent - use clients for MPD \r\nto control forked-daapd. \r\nBy default forked-daapd listens on port 6600 for MPD clients. You can change this by\r\nadding a section \"mpd\" to the forked-daapd.conf file:\r\n\r\n```\r\n# MPD configuration (only have effect if MPD enabled - see README/INSTALL)\r\nmpd {\r\n\tport = 8800\r\n}\r\n```\r\n\r\nCurrently only a subset of the commands offered by MPD (see [MPD protocol documentation](http://www.musicpd.org/doc/protocol/)) \r\nare supported by forked-daapd.\r\n\r\nDue to some differences between forked-daapd and MPD not all commands will act the same way they would running MPD:\r\n\r\n- consume, crossfade, mixrampdb, mixrampdelay and replaygain will have no effect\r\n- single, repeat: unlike MPD forked-daapd does not support setting single and repeat separately \r\n  on/off, instead repeat off, repeat all and repeat single are supported. Thus setting single on \r\n  will result in repeat single, repeat on results in repeat all.\r\n\r\nFollowing table shows what is working for a selection of MPD clients:\r\n\r\n|          Client                               |  Type  | Status          |\r\n| --------------------------------------------- | ------ | --------------- |\r\n| [mpc](http://www.musicpd.org/clients/mpc/)    | CLI    | Working commands: mpc, add, crop, current, del (ranges are not yet supported), play, next, prev (behaves like cdprev), pause, toggle, cdprev, seek, clear, outputs, enable, disable, playlist, ls, load, volume, repeat, random, single, search, find, list, update (initiates an init-rescan, the path argument is not supported)   |\r\n| [ympd](http://www.ympd.org/)                  | Web    | Everything except \"add stream\" should work |\r\n\r\n\r\n\r\n\r\n","google":"UA-68930202-1","note":"Don't delete this file! It's used internally to help with page regeneration."}